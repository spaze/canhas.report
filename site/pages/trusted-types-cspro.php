<?php
declare(strict_types = 1);

$cspHeader = "Content-Security-Policy-Report-Only: require-trusted-types-for 'script'; report-uri " . \Can\Has\reportUrl('csp/enforce');
header($cspHeader);
?>
<!DOCTYPE html>
<html lang="en">
<?= \Can\Has\pageHead('Require Trusted Types with CSPRO'); ?>
<body>
<?= \Can\Has\headerHtml('DOM-XSS Injection Sinks Detection with Trusted Types and CSPRO'); ?>
<div id="main">
<div class="content">
	<?= \Can\Has\bookmarks('index', 'reports'); ?>
	<h1>DOM-based XSS Injection Sinks Detection with Trusted Types and Content Security Policy with <code>report-uri</code></h1>
	<p><em>
		When you use Trusted Types, and a plain string is passed to a so-called sink like the <code>innerHTML</code> or the <code>document.write()</code> method without it being escaped by the Trusted Types policy, a report is generated by the browser.
		If the policy is enforced, the string will not be passed to the sink, protecting your app against <abbr title="Document Object Model">DOM</abbr>-based cross-site scripting (<abbr title="Cross-Site Scripting">XSS</abbr>) attacks.
	</em></p>
	<p><em>
		However, when starting with Trusted Types, you may want to first check how many of those sinks you're actually using, so you can plan ahead and fix the violations before they break your app.
		With the following <code>Content-Security-Policy-Report-Only</code></cod> header, your app or website will continue to work normally, but you'll receive a report whenever something uses a sink.
	</em></p>
	<?= \Can\Has\trustedTypesNotSupportedHtml(); ?>
	<h2>The CSPRO (CSP Report-Only) response header:</h2>
	<pre><code><?= \Can\Has\highlight($cspHeader); ?></code></pre>
	<?= \Can\Has\trustedTypesCspHeaderDescriptionHtml(); ?>

	<h2>DOM-based XSS</h2>
	<p>
		<button id="prompt-xss" class="schroedingers-cat">Enter any HTML</button>
		<span id="xss-me"></span>
		<?php \Can\Has\scriptSourceHtmlStart('schroedingers-cat'); ?>
		<script>
			document.getElementById('prompt-xss').onclick = function() {
				const html = prompt('Enter any HTML', 'foo <strong>bar</strong>');
				if (html) {
					document.getElementById('xss-me').innerHTML = html;
				}
			}
		</script>
		<?php \Can\Has\scriptSourceHtmlEnd(); ?>
	</p>
	<ul>
		<li><span class="allowed">Allowed</span></li>
		<li>Would be blocked if the policy was <em>enforced</em> and not <em>report-only</em></li>
		<li><?= \Can\Has\willTriggerReportUriHtml(); ?></li>
		<li><?= \Can\Has\checkReportsReportUriHtml(); ?></li>
	</ul>

	<?= \Can\Has\specsHtml('trusted-types'); ?>
</div>
</div>
<?= \Can\Has\footerHtml(); ?>
</body>
</html>
